{
  "name": "Mapic SDK",
  "tagline": "Scripts in Bash and NodeJS for interacting with Mapic",
  "body": "# Scripts in Bash and NodeJS for interacting with Mapic Services.\r\n\r\n#### Current SDK's / scripts\r\n1. Upload datasets to timeseries (aka a `cube`)\r\n2. Replace datasets in timeseries  \r\n_...more to come!_\r\n\r\n## Install\r\n\r\n1. Clone this repository to your harddrive,\r\n2. Enter folder\r\n3. Run install script  \r\nlike so:\r\n\r\n```bash\r\ngit clone https://github.com/mapic/sdk.git\r\ncd sdk\r\n./install.sh\r\n```\r\n\r\n\r\n## Usage\r\n\r\n#### Upload datasets\r\n\r\nCreate your own `datacube.json` file from [`datacube.json.template`](https://github.com/mapic/sdk/blob/master/datasets/datacube.template.json):\r\n\r\n```javascript\r\n{\r\n    \"title\" : \"Hallingdal Snow Cover - 2016\",\r\n    \"options\" : {\r\n        \"type\" : \"scf\",\r\n        \"dateformat\" : \"YYYYMMDD\"\r\n    },\r\n    \"datasets\" : \"/home/ftp/snow/datasets/2016/\",\r\n    \"masks\" : [\r\n        {\r\n            \"title\" : \"hallingdal\",\r\n            \"description\" : \"Nedbørsfelt: Hallingdalsvassdraget\",\r\n            \"geojson\" : \"/home/ftp/snow/masks/hallingdal/hallingdal.geojson\",\r\n            \"data\" : \"/home/ftp/snow/masks/hallingdal/hallingdal.scf.json\"\r\n        },\r\n        {\r\n            \"title\" : \"rjukan\",\r\n            \"description\" : \"Kraftverk\",\r\n            \"geojson\" : \"/home/ftp/snow/masks/rjukan/rjukan.union.geojson\",\r\n            \"data\" : \"/home/ftp/snow/masks/rjukan/rjukan.scf.json\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n**Then run script:**   \r\n`./upload_datacube.sh datacube.json`.\r\n\r\nThis will do the following:  \r\n1. Create a cube  \r\n2. Upload all rasters in folder  \r\n3. Add all rasters to cube  \r\n4. Create a project  \r\n5. Add cube layer to project  \r\n\r\n\r\n#### Replace datasets\r\n\r\nYou can replace datasets in a cube, by using the `./replace_datasets.sh` script with the `replace_datasets.json` configuration:\r\n\r\n```json\r\n{\r\n    \"folder\" : \"/home/ftp_globesar/2016_02/\",\r\n    \"cube_id\" : \"cube-535a0ec3-8705-4215-8c94-8786b9680598\",\r\n    \"granularity\" : \"day\",\r\n    \"date_format\" : \"x_x_YYYYMMDD\"\r\n}\r\n```\r\n\r\n\r\nSimply add the `cube_id` for the cube which you would like to replace datasets in, and the folder from which to upload data. The `granularity` option is used when comparing dates of datasets (see below for more info on date parsing). `'day'` is appropriate for daily rasters. The `date_format` corresponds to the pre-defined functions created to parse date strings (see `Date parsing` below). \r\n\r\n**Then run script:**   \r\n`./replace_datasets.sh replace_datasets.json`.\r\n\r\n\r\nNB: Note that you may have to reload a couple of times in order to get the new datasets showing (work in progress).\r\n\r\nTo get the `cube_id`:  \r\n![get-cubeid](https://cloud.githubusercontent.com/assets/2197944/15475233/561f349e-2109-11e6-8587-55c3cfb37631.gif)\r\n\r\n\r\n\r\n\r\n#### Note about date parsing:\r\nDates are added to metadata from filename. \r\n\r\nCurrently with [these helper functions](https://github.com/mapic/sdk/blob/master/lib/upload_rasters_to_cube.js#L20-L38), where `SCF_MOD_2014_001.tif` is parsed to `Jan 01 2014`.\r\n\r\nIt's possible to implement your own date parser, and change [this function call](https://github.com/mapic/sdk/blob/master/lib/upload_rasters_to_cube.js#L113).\r\n\r\n\r\n## Dependencies:\r\n- Git: https://git-scm.com/download/\r\n- NodeJS: https://nodejs.org/en/download/\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}